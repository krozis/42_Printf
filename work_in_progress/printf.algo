
FONCTION
	int utiliser_fid(S_FID fid, VA_LIST list)
{
	VARIABLE
		INT	resultat
	SI 
		fid->type_conversion = i OU d
	ALORS
		resultat = fonction_entier(fid, list->suivant)
	SINON SI
		fid->type_conversion = x OU X
	ALORS
		resultat = fonction_hexa(fid, list->suivant)
	SINON SI
		fid->type_conversion = c
	ALORS
		resultat = fonction_char(fid, list->suivant)
	SINON SI
		fid->type_conversion = s
	ALORS
		resultat = fonction_string(fid, list->suivant)
	SINON SI
		fid->type_conversion = u
	ALORS
		resultat = fonction_entier_non_signe(fid, list->suivant)
	SINON SI
		fid->type_conversion = p
	ALORS
		resultat = fonction_pointeur(fid, list->suivant)
	Retourne resultat
}

FONCTION
	int	definir_fid(CHAR *format, S_FID fid)
{
	VARIABLE
		INT		taille_fidtaille_fid
	TANTQUE
		format[i] EST UN FLAG	
	FAIRE
		ajouter_FLAG
		taille_fid++
	SI
		format[i] EST UN CHIFFRE
	ALORS
		definir_taille_max
		taille_fid += taille_du_nombre
	SI
		format[i] = '.'
	ALORS
		definir_precision
		taille_fid += taille_du_nombre + 1
	definir_type_conversion
	taille_fid++

	Retourne taille_fid
}

FONCTION
	int	fonction_si_fid_trouve(VA_LIST list, CHAR *format, INT *resultat)
{
	VARIABLE
		INT		taille_fid
		S_FID	fid
	SI 
		format[i] = '%'
	ALORS
		*resultat += ecrire('%')
	SINON
		taille_fid = definir_fid(format, fid)
		*resultat = utiliser_fid(fid, list)
	Retourne taille_fid
}


FONCTION 
	int	printf(char *format, ...)
{
	VARIABLE
		VA_LIST list
		INT		resultat

	start VA_LIST
	TANTQUE (format[i])
	{
		SI
			format[i] = '%'
		ALORS
			i += fonction_si_fid_trouve(list, format, resultat)
		SINON
			resultat += ecrire(format[i])
	}
	close VA_LIST
	Retourne resultat
}